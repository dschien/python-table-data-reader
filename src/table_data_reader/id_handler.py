import openpyxl
# todo add logging to methods!


def build_id_dict(filename):
    """
    Read through each sheet of the workbook given by the filename
    Build some dictionary mapping variables to their ids
    Find variables with missing ids and flag them and give them a value(?)
    Find variables with duplicate ids and raise an error
    Return the constructed dictionary (and the wb if changed?)

    :param filename: The filename of the excel workbook to be parsed
    :return: A dictionary of [SOMETHING] to their id values
    """

    wb = openpyxl.load_workbook(filename, data_only=True)
    # keys are sheet names, values are dictionaries with row keys and id values
    id_map = {}
    highest_id = -1

    # iterate through the dedicated group-variable sheets and fill out the ids
    for _sheet_name in wb.sheetnames:
        if _sheet_name in ['changes', 'metadata']:
            continue

        sheet = wb[_sheet_name]
        rows = list(sheet.iter_rows())
        id_column = get_id_column_index(sheet)
        id_map[_sheet_name] = {}

        for row in rows[1:]:
            if row[0].value is None:
                continue
            row_index = row[0].row
            id_val = row[id_column].value
            if id_val is not None:
                highest_id = max(id_val, highest_id)
            id_map[_sheet_name][row_index] = id_val

    wb.close()
    res = check_for_duplicate_ids(id_map)
    fill_missing_ids(filename, id_map, highest_id)
    return id_map, highest_id


def get_id_column_index(sheet):
    """
    :param sheet: The specific sheet to get the id column for (ZERO INDEXED!)
    :return: The id column index
    """
    rows = list(sheet.iter_rows())
    header = [cell.value for cell in rows[0]]
    id_column = header.index('id')
    return id_column


def check_for_duplicate_ids(id_map) -> bool:
    """
    Checks for duplicate ids in the map
    :param id_map: The id_map generated by build_id_dict()
    :return: True if duplicate non-null id's exist, false otherwise
    """
    used_ids = set()
    for sheet in id_map.keys():
        for row in id_map[sheet].keys():
            current_id = id_map[sheet][row]
            if current_id is not None and current_id in used_ids:
                return True
            used_ids.add(current_id)
    return False


def fill_missing_ids(filename, id_map, highest_id):
    """
    Open the workbook, fill in any None ids from the id_map with incremental values, and save it
    todo add "changes" note to workbook if changed!
    :param filename: Name of the worksheet to be edited
    :param id_map: The id_map generated by build_id_dict()
    :param highest_id: The highest id used by any sheet
    :return:
    """
    wb = openpyxl.load_workbook(filename, data_only=True)

    for sheet_name in id_map.keys():
        for row in id_map[sheet_name].keys():
            current_id = id_map[sheet_name][row]
            if current_id is None:
                sheet = wb[sheet_name]
                id_column = get_id_column_index(sheet)
                cell = sheet.cell(row=row, column=id_column+1)
                highest_id += 1
                cell.value = highest_id

    wb.save(filename)
    wb.close()
